<?php
namespace FluidTYPO3\Flux\Tests\Unit\Content;

/*
 * This file is part of the FluidTYPO3/Flux project under GPLv2 or later.
 *
 * For the full copyright and license information, please read the
 * LICENSE.md file that was distributed with this source code.
 */

use FluidTYPO3\Flux\Content\ContentTypeFluxTemplateDumper;
use FluidTYPO3\Flux\Content\ContentTypeManager;
use FluidTYPO3\Flux\Content\TypeDefinition\RecordBased\RecordBasedContentTypeDefinition;
use FluidTYPO3\Flux\Tests\Unit\AbstractTestCase;
use PHPUnit\Framework\MockObject\MockObject;
use TYPO3\CMS\Extbase\Object\ObjectManagerInterface;
use TYPO3Fluid\Fluid\View\TemplateView;

class ContentTypeFluxTemplateDumperTest extends AbstractTestCase
{
    protected ?ContentTypeManager $contentTypeManager = null;

    protected function setUp(): void
    {
        $this->contentTypeManager = new ContentTypeManager();

        parent::setUp();
    }

    public function testDumpTemplateFromRecordBasedContentTypeDefinition(): void
    {
        $record = [
            'uid' => 123,
            'title' => 'Test form',
            'description' => 'Test form',
            'icon' => 'test',
            'content_type' => 'flux_test',
        ];
        $contentTypeDefinition = $this->getMockBuilder(RecordBasedContentTypeDefinition::class)
            ->setMethods(['getContentConfiguration', 'getGridConfiguration'])
            ->setConstructorArgs([$record])
            ->getMock();
        $contentTypeDefinition->method('getContentConfiguration')->willReturn([]);
        $contentTypeDefinition->method('getGridConfiguration')->willReturn([]);

        $this->contentTypeManager->registerTypeDefinition($contentTypeDefinition);

        $parameters = [
            'row' => $record,
        ];

        $subject = new ContentTypeFluxTemplateDumper();

        $output = $subject->dumpFluxTemplate($parameters);
        $expected = <<< SOURCE
<p class="text-success">Template parses OK, it is safe to copy</p><pre>&lt;f:layout /&gt;
&lt;f:section name=&quot;Configuration&quot;&gt;
    &lt;flux:form id=&quot;&quot;&gt;
        &lt;!-- Generated by EXT:flux from runtime configured content type --&gt;

    &lt;/flux:form&gt;
    &lt;flux:grid&gt;
        &lt;!-- Generated by EXT:flux from runtime configured content type --&gt;

    &lt;/flux:grid&gt;
&lt;/f:section&gt;

&lt;f:section name=&quot;Main&quot;&gt;

&lt;/f:section&gt;</pre>
SOURCE;

        self::assertSame($expected, $output);
    }

    protected function createObjectManagerInstance(): ObjectManagerInterface
    {
        $templateView = new TemplateView();
        $templateView->getRenderingContext()
            ->getViewHelperResolver()
            ->addNamespace('flux', 'FluidTYPO3\\Flux\\ViewHelpers');

        /** @var ObjectManagerInterface&MockObject $objectManager */
        $objectManager = parent::createObjectManagerInstance();
        $objectManager->method('get')->willReturnMap(
            [
                [\TYPO3\CMS\Fluid\View\TemplateView::class, $templateView],
                [ContentTypeManager::class, $this->contentTypeManager],
            ]
        );
        return $objectManager;
    }
}
