  # cat=basic/enable; type=options[0,1,2]; label=Debug Mode: Display debug information about every Flux template being rendered and every ConfigurationProvider being used. Value "0" (production) means debug messages are disabled and Exceptions may be suppressed. Value "1" (development) means every debug message is displayed. Value "2" (staging, testing) means only severe errors' messages are dislayed.
debugMode = 0

  # cat=basic/enable; type=boolean; label=Disable Fluid caching of Flux forms: If enabled, this option forces Fluid to re-parse the template file sources on every access - which can be a benefit in a development context, requiring the caches to be cleared less frequently - but with the drawback of slightly decreasing performance in both FE and BE. Note: This option can also help prevent PHP fatal errors on Flux templates which for whichever reason fail to compile but do not report an error in the process.
disableCompiler = 0

  # cat=basic/enable; type=boolean; label=Sheet compacting: If enabled, compacts Flux FlexForms which only have a single sheet into a ROOT-type form instead. If your site contains current elements do not enable this - however, the option is safe to enable for new sites.
compact = 0

  # cat=basic/enable; type=boolean; label=Development stage rewriting of LLL files: If enabled, Flux will aggressively read, change and save LLL files whenever automatic LLL labels are built, if that label is missing from the LLL file. Beware! This will add significant processing time and I/O - enable this only while you are in translation mode or need your LLL files to be updated by Flux instead of doing it manually. Can be used as a migration tool: taking a backup of a collection of templates, removing all labels from fields, forms, sections etc. and then enabling this feature and clearing all caches, will add every missing LLL label to the LLL file in question. Note: requires an existing, valid LLL file and supports only the old style locallang.xml files - also sorts existing labels! Having tidy installed is pretty much mandatory.
rewriteLanguageFiles = 0

  # cat=basic/enable; type=boolean; label=Error handling: If enabled, all Flux controllers are permitted to handle their own errors in ways that are far more flexible than traditional error catching. Enable with care - if your plugin, content or page template collection does not contain an Error.html template, your site may risk breaking with an extremely basic and not very informative error รก la "Template not found for action foobar" but when enabled and combined with proper error templates you can customise pretty much any error which might happen anywhere when a Flux controller subclass is in play. Best turned off on development sites unless you are developing exactly error templates as it greatly limits debug output!
handleErrors = 0

  # cat=basic/enable; type=boolean; label=Help improve Flux by reporting errors remotely: If enabled, and debug mode enabled at any level, Flux will send a very brief error report to http://fedext.net/report/error.php as a GET which contains only the exception code, your TYPO3 core version, Flux's version and whether or not your Flux extension folder is a Git repository. Only a limited set of Exceptions will be reported - you can at any time read the entire list from http://fedext.net/report/monitored-exceptions.json which is also downloaded and cached (with expiration of 24 hours) in your typo3temp folder. Only codes in this list will ever be remotely reported and the message itself (which might contain sensitive information) will never be transmitted. On the server receiving the error report all GET requests are logged to /dev/null and the report is completely anonymised (storing only the information mentioned previously - source IP is not recorded). The statistical output of these reports is available, updated live, at http://fedext.net/report/ which is accessible to public.
reportErrors = 0
